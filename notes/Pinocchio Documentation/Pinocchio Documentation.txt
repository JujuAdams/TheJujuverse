Pinocchio v1.0.0
Juju Adams 2022-03-07



Pinocchio is a state-based animation and tweening system. Animations are controlled by
constructing a "puppet" struct, configuring that puppet, and issues commands to that puppet
via methods. Animations are triggered by instructing the puppet to transition from one state
to another state. Constructing a puppet is easy enough:

    ///Create event
    newPuppet = new Pinocchio(<rulesStruct>);

Note the we need to pass a ruleset into the constructor function; we'll talk about rulesets
a little later. At any rate, "newPuppet" holds a reference to a puppet struct which can be
manipulated by calling methods on it. For example, the .Update() method will cause the
puppet to handle the current animation, updating all of the puppet's variables:

    ///Step event
    newPuppet.Update();

N.B. It is very important to call .Update() every frame to ensure that the puppet is updating
     its variables constantly!

We can then call the .Goto() method to start a transition from one state to another:

    if (keyboard_check_pressed(vk_f1)) newPuppet.Goto("popOut");

There are a handful of other methods available for use (there's a list of methods at the
bottom of this document).



When creating a puppet, you must provide a ruleset in the form of a struct that is formatted
in a specific way. A ruleset defines what states exist for the puppet, and how to transition
between states. Here is an example of a ruleset:

    {
        initial: {
            yOffset: -30,
            alpha: 0,
        },
    
        initial_to_create: {
            yOffset: curveCubicIn,
            alpha: curveLinear,
        },
    
        create: {
            yOffset: 0,
            alpha: 1,
        },
    
        create_to_final: {
            yOffset: curveBackOut,
            duration: 300,
        },
    
        final: {
            yOffset: 30,
            alpha: 0,
        },
    }

Let's break down this struct into pieces. The overall struct contains child structs. There are two
different kinds of child struct:
    1. State Definitions
    2. Transition Definitions

States define a set of variables and their respective values when in that state. Transitions define
what interpolation behaviour to use for each variable when transitioning between two specific states.
Looking again at our ruleset we can see the following structure:

    {
        initial: {...},              A state called "initial"
        initial_to_create: {...},    A transition from "initial" to "create"
        create: {...},               A state called "create"
        create_to_final: {...},      A transition from "create" to "final"
        final: {...},                A state called "final"
    }

A state definition contains variables. When the puppet reaches a given state then the puppet's
variable will hold the exact values defined for that state. A state's name is determined by the
member variable's name in the ruleset. The following ruleset defines a state called "initial"
that contains two variables, "yOffset" and "alpha", set to -30 and 0 respectively.

    {
        initial: {
            yOffset: -30,
            alpha: 0,
        },
        ...
    }

State names can be whatever you want, though there are a few restrictions on variable names:
    1. A variable name cannot start with "__"
    2. A variable name cannot be the same as any puppet method names (e.g. Goto or Update)
    3. A variable name cannot be "duration" or "delay"

Additionally, the value for a state variable must be either a number or a method. If the
variable's value is a number then the puppet will set that variable to that value when the
puppet enters the relevant state. However, if the value for a variable is a method then that
method is re-evaluated every time .Update() is called for the puppet. The method set for a
state variable is passed a single argument that represents how long the puppet has been in
the given state - this defaults to being measured in milliseconds, but you can change the
units of time to "game frames" by setting PINOCCHIO_USE_MILLISECONDS to false.



A puppet expects there to be a state definition that describes the initial state for every
variable that the puppet will use. You can specify your own initial state name by changing the
PINOCCHIO_INITIAL_STATE_NAME macro; it defaults to "initial". When constructing a new puppet, it
will start in this initial state.

It is also recommended to use a state definition for the final ("destroy") state for a puppet.
The name itself is defined by PINOCCHIO_FINAL_STATE_NAME. A puppet will not strictly *requres*
the existence of a final state, but the .Finalize() method will not be available if no final
state can be defined in the ruleset.



We also have transition definitions. Transitions describe how a puppet should interpolate
from one state to another state. A transition's name is made of three parts:
    1. The name of the origin state
    2. A "joiner substring" defined by PINOCCHIO_TRANSITION_SUBSTRING. This defaults to "_to_"
    3. The name of the destination state
For example, the transition defintion that connects "visible" to "invisible" is called
"visible_to_invisible". It is also possible to define wildcard transitions, please see
PINOCCHIO_TRANSITION_WILDCARD_STATE for more information.

The duration of a transition is given by the "duration" variable in the transition definition.
Transitions can have a short predelay associated with them too, this can be set with the
"delay" variable in a transition definition. Please note that .Goto() also contains a delay
offset parameter. Durations and delays default to being measured in milliseconds, but you
can change delay and duration units to frames by setting PINOCCHIO_USE_MILLISECONDS to false.

Transitions allow you to define specific interpolation behaviours for each individual variable.
Interpolation behaviours are unique to each transition and one variable can be interpolated in
many different ways depending on what transition is occurring. Interpolation behaviours can be
one of three different types:
    1. An animation curve asset that you've created in the GameMaker IDE
    2. A cubic Bezier curve, defined with a 4-element array [x1, y1, x2, y2]
    3. Either PINOCCHIO_CURVE_NONE or PINOCCHIO_CURVE_INSTANT

If no interpolation behaviour is defined for a variable then it will be linearly interpolated.

Looking again at our example ruleset we can now fully understand the "create_to_final"
transition definition. It has a duration of 300ms. The "yOffset" variable will follow the
curveBackOut animation curve (added via the GameMaker IDE) and the "alpha" variable will
be linearly interpolated as it has no specific animation curve definition.

    {
        ...
        create_to_final: {
            yOffset: curveBackOut,
            duration: 300,
        },
    
        final: {
            yOffset: 30,
            alpha: 0,
        },
        ...
    }



Puppets are controlled by executing methods. Below is a full list of the available methods and
considerations for their use.

.Update([stepSize = 1])
    Updates a puppet's variables and transitions between states. You must call this every frame
    in order for animations to play properly. You may provide a custom step size to account for
    variable framerates etc.

.Goto(stateName, [delayOffset = 0], [callback])
    Starts a tween from the current state to the provided new state. The begins a new animation
    from one staet to the next following the rules set out in the ruleset provided when the
    puppet was created. The duration and predelay for the animation is defined in the rules
    struct. An additional delay offset can be specified when calling .Goto() which is useful for
    slightly offseting animations e.g. for list of items. If provided, a callback method

.Set(stateName)
    Forces the puppet into the given state, updating its variables accordingly. All transitions
    will be cancelled immediately and callbacks will not be executed

.Finalize([reset = false])
    A special way to start a transition into a puppet's final state (defined when constructing
    the puppet, defaults to "final"). You can think of .Finalize() as a way to "destroy" a
    puppet. Once .Finalize() has been called, the puppet is locked into a transition to its
    final state and cannot be cancelled or otherwise overriden. At the end of the transition,
    .GetFinalize() will return <true>. If the "reset" argument for .Finalize() is set to <true>
    then the puppet will unlock itself and automatically reset its state to the initial state
    (again defined when constructing the the puppet, defaults to "initial")
    
.Skip([immediate = true])
    Skips the current transition, causing it to complete. If the "immediate" argument is set to
    <false> then puppet's variables will only be updated the next time .Update() is called

.Cancel()
    Stops the current transition, returning the puppet to its previous state. Please note that
    this does not cancelled the queued state! If you call .Goto("A") then .Goto("B") then call
    .Cancel(), the puppet will start a transition to the "B" state

.CancelQueued()
    Stops the queued transition, if any. This will not affect the current transition if one is
    playing, please use .Cancel() for that instead

.GetProgress()
    Returns a real number from 0 to 1 indicating how "done" a transition is, 1 meaning "fully
    complete"

.GetCurrent()
    Returns the name of the current state

.GetNext()
    Returns the name of the next state that the puppet is transitioning into. If there is no
    transition then this method will return <undefined>

.GetQueued()
    Returns the name of the queued state that the puppet will transition into after the current
    transition finshes. If no state is queued then this method will return <undefined>

.GetFinalized()
    Returns whether the puppet has been finalized, effectively "destroyed". Please see
    .Finalize() for more information. Please note that this will only return <true> if the
    .Finalize() method has been called; this will not return <true> if the puppet finds itself
    in its final state by other means (.Set() or .Goto())